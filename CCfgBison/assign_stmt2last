
assign_stmt : identifier  '=' expr {
							#ifdef debug2
								cout << "assign_stmt -> identifier = expr \n ";
							#endif
							$$ = new attr();
							$$->my_type = Void;
							struct code_element temp_code;
							temp_code.arg1 = $3->place;
							int scope = ((compiler *)c)->get_scope($1->place.var);
							temp_code.result = $1->place;
							temp_code.result.var = $1->place.var + "_" + to_string(scope);
							temp_code.result.args_type = 1;
							temp_code.data2 = "=";
							temp_code.data1 = Assignment;
							$$->code.insert ($$->code.end(),$3->code.begin(),$3->code.end());
							$$->code.push_back(temp_code);
							if($1->dimension[0]==2) {
							
								temp_code.data2 = "[][]";
								temp_code.data1 = Array;
								printf("double array in assign_stmt -> identifier = expr offset %d\n",$1->offset_temp_number);
								temp_code.arg2.temp = $1->offset_temp_number;
								temp_code.arg2.args_type = 2;
							}
							else if($1->dimension[0]==1) {
								temp_code.data2 = "[]";
								temp_code.data1 = Array;
								temp_code.arg2.temp = $1->offset_temp_number;
								temp_code.arg2.args_type = 2;
							}
							#ifdef debug2
								printf("In assign_stmt -> identifier '=' expr\n");
								cout << temp_code.result.var;
							#endif 
							global_code.push_back(temp_code);




							#ifdef debug
								printf("===============CODE GENERATED====================\n");
								for(int i=0;i<global_code.size();i++) {
									if(global_code[i].data1==Jump) {
										cout << "jump instruction\n";
										continue;
									}
									cout << global_code[i].data2 << "\t";
									cout << "(" << global_code[i].arg1.var << "," << global_code[i].arg1.temp << "," << global_code[i].arg1.int_val << "," << global_code[i].arg1.float_val << "," << global_code[i].arg1.args_type << ")\t(" << global_code[i].arg2.var << ","<<global_code[i].arg2.temp << "," << global_code[i].arg2.int_val << "," << global_code[i].arg2.float_val << "," << global_code[i].arg2.args_type<<")\t(" << global_code[i].result.var << "," << global_code[i].result.temp << "," << global_code[i].result.int_val << "," << global_code[i].result.float_val << "," << global_code[i].result.args_type<< ")\n";

								}	
								printf("===============CODE GENERATION END====================\n");
							#endif 
	                       struct symbol_table *temp = current_symbol_table;
                       		int flag = 1;
                        	while(flag) {
                                        if( temp->table.find(string( $1->var_name[0])) != temp->table.end()){
                                                $$->my_type = temp->table[string($1->var_name[0])].my_type;
                                                flag = 0;
						$$->dimension[0] = temp->table[string($1->var_name[0])].dimension - $1->dimension[0];

                                	}
                                	if(temp->parent==NULL && flag==1) {
                                        	yyerror("error: variable not declared\n");
                                        	flag = 0;
                                	}
                                	temp = temp->parent;
                        	}
				enum type_enum t = $$->my_type;
				enum type_enum tt = $3->my_type; 
				if (t == Int && tt== Long_long)
					yyerror("Warning: assigning long long to an integer\n",KYEL);
				else if (t==Int && tt == Float)
					yyerror("Warning: assigning float to an int\n",KYEL);
				else if (t==Int && tt == Double)
					yyerror("Warning: assigning int to double\n",KYEL);
				else if (t==Float && tt == Double)
					yyerror("Warning: assigning float to a double\n",KYEL);
				else if (t==Long_long && tt == Float)
					yyerror("Warning: assigning long long to a float\n",KYEL);
				else if (t==Long_long && tt == Double)
					yyerror("Warning: assigning long long to a double\n",KYEL);
				else if (t != tt || $$->dimension[0] != $3->dimension[0] )
					yyerror("Warning: Type mismatch\n",KYEL);

				free($1);
				free($3);

				}/*Assignment statement.*/
	;
number : T_DEC_INT	{
						#ifdef debug 
							printf("number-> T_DEC_INT\n");
						#endif
						$$ = new attr();
						$$->place.int_val = $1;
						$$->place.args_type = 3;
						$$->my_type =Int;
					}
	| T_DEC_FLOAT {
						$$ = new attr();
						$$->place.float_val = $1;
						$$->place.args_type = 4;
						$$->my_type = Int;
					}
	;

identifier  : ID	{  	
						$$ = new attr();
						$$->place.var = $1;
						$$->place.args_type = 1;
						strcpy($$->var_name[0],$1);
							$$->dimension[0] = 0;
					 }/*Array can have infinite dimensions. Must do something about it in future.*/ 
		| ID array {
							$$ = new attr();
							strcpy($$->var_name[0],$1);
							$$->place.var = $1;
							if(!is_declaration&& $2->dimension[0]==2) {
								struct code_element temp;
								temp.result.temp = newTemp();
								temp.result.args_type = 2;
								temp.data2 = "=";
								temp.arg1.int_val = ((compiler *)c)->get_second_size($1);
								temp.arg1.args_type = 3;
								global_code.push_back(temp);

								temp.result.temp = newTemp();
								temp.data2 = "*";
								temp.arg1.temp = temp.result.temp-1;
								temp.arg1.args_type = 2;
								temp.arg2.temp = temp.result.temp-2;
								temp.arg2.args_type = 2;
								global_code.push_back(temp);

								temp.result.temp = newTemp();
								temp.data2 = "+";
								temp.arg1.temp = temp.result.temp-1;
								temp.arg1.args_type = 2;
								temp.arg2.temp = temp.result.temp-4;
								temp.arg2.args_type = 2;
								global_code.push_back(temp);

								$$->offset_temp_number  = temp.result.temp;


							}
							else if(!is_declaration&& $2->dimension[0]==1) {
								$$->offset_temp_number  = max_index;
							}
							$$->dimension[0] = $2->dimension[0];
							$$->array_size[0] = $2->array_size[0];
							$$->element_size[0] = $2->element_size[0];
							#ifdef debug2
								printf("is_declaration = %d \n",is_declaration);
							#endif
							free($2);
		}
	;
array  : '[' ID ']' array  {$$ = new attr(); $$->dimension[0] = $4->dimension[0] +1; printf("%s",$2); free($4);
								if(!is_declaration) {
									struct code_element temp;
											temp.result.temp = newTemp();
											temp.result.args_type = 2;
											temp.data2 = "=";
											temp.arg1.var = string($2)+"_"+to_string(((compiler *)c)->get_scope(string($2)));
											temp.arg1.args_type = 1;
											global_code.push_back(temp);
								}
}
	| '[' ID ']' {$$ = new attr(); $$->dimension[0] = 1;
					if(!is_declaration) {
											struct code_element temp;
											temp.result.temp = newTemp();
											temp.result.args_type = 2;
											temp.data2 = "=";
											temp.arg1.var = string($2)+"_" +to_string(((compiler *)c)->get_scope(string($2)));
											temp.arg1.args_type = 1;
											global_code.push_back(temp);
					}
				}
	| '[' T_DEC_INT ']' {$$ = new attr();  $$->dimension[0] = 1; $$->array_size[0] = $2;
							if(is_declaration)
								$$->element_size[0] = $2;
							else {
								struct code_element temp;
								temp.result.temp = newTemp();
								temp.result.args_type = 2;
								temp.data2 = "=";
								temp.arg1.int_val = $2;
								temp.arg1.args_type = 3;
								global_code.push_back(temp);
							}
						}
	| '[' T_DEC_INT ']' array {
									$$ = new attr(); $$->dimension[0] = $4->dimension[0] + 1; free($4);
									if($$->dimension[0] == 2) {
										$$->array_size[0] = $4->array_size[0];
										if(is_declaration)
											$$->element_size[0] =$2*$4->element_size[0];
										else {
											struct code_element temp;
											temp.result.temp = newTemp();
											temp.result.args_type = 2;
											temp.data2 = "=";
											temp.arg1.int_val = $2;
											temp.arg1.args_type = 3;
											global_code.push_back(temp);
										}
									}

							  }
	;
%%

