
assign_stmt : identifier '=' expr {
							#ifdef debug
								printf("In assign_stmt -> identifier '=' expr\n");

							#endif 
							$$ = new attr();
							$$->my_type = Void;
							struct code_element temp_code;
							temp_code.arg1 = $3->place;
							temp_code.result = $1->place;
							temp_code.data2 = "=";
							temp_code.data1 = Assignment;
							$$->code.insert ($$->code.end(),$3->code.begin(),$3->code.end());
							$$->code.push_back(temp_code);
							global_code.push_back(temp_code);


							#ifdef debug
								printf("===============CODE GENERATED====================\n");
								for(int i=0;i<global_code.size();i++) {
									cout << global_code[i].data2 << "\t";
									cout << "(" << global_code[i].arg1.var << "," << global_code[i].arg1.temp << "," << global_code[i].arg1.int_val << "," << global_code[i].arg1.float_val << "," << global_code[i].arg1.args_type << ")\t(" << global_code[i].arg2.var << ","<<global_code[i].arg2.temp << "," << global_code[i].arg2.int_val << "," << global_code[i].arg2.float_val << "," << global_code[i].arg2.args_type<<")\t(" << global_code[i].result.var << "," << global_code[i].result.temp << "," << global_code[i].result.int_val << "," << global_code[i].result.float_val << "," << global_code[i].result.args_type<< ")\n";

								}	
								printf("===============CODE GENERATION END====================\n");
							#endif 
	                       struct symbol_table *temp = current_symbol_table;
                       		int flag = 1;
                        	while(flag) {
                                        if( temp->table.find(string( $1->var_name[0])) != temp->table.end()){
                                                $$->my_type = temp->table[string($1->var_name[0])].my_type;
                                                flag = 0;
						$$->dimension[0] = temp->table[string($1->var_name[0])].dimension - $1->dimension[0];

                                	}
                                	if(temp->parent==NULL && flag==1) {
                                        	yyerror("error: variable not declared\n");
                                        	flag = 0;
                                	}
                                	temp = temp->parent;
                        	}
				enum type_enum t = $$->my_type;
				enum type_enum tt = $3->my_type; 
				if (t == Int && tt== Long_long)
					yyerror("Warning: assigning long long to an integer");
				else if (t==Int && tt == Float)
					yyerror("Warning: assigning float to an int");
				else if (t==Int && tt == Double)
					yyerror("Warning: assigning int to double");
				else if (t==Float && tt == Double)
					yyerror("Warning: assigning float to a double");
				else if (t==Long_long && tt == Float)
					yyerror("Warning: assigning long long to a float");
				else if (t==Long_long && tt == Double)
					yyerror("Warning: assigning long long to a double");
				else if (t != tt || $$->dimension != $3->dimension )
					yyerror("Warning: Type mismatch");

				free($1);
				free($3);

				}/*Assignment statement.*/
	;
Marker_e :  {
				$$ = global_code.size()  + 1;
			}
		;
number : T_DEC_INT	{
						#ifdef debug 
							printf("number-> T_DEC_INT\n");
						#endif
						$$ = new attr();
						$$->place.int_val = $1;
						$$->place.args_type = 3;
						$$->my_type =Int;
					}
	| T_DEC_FLOAT {
						$$ = new attr();
						$$->place.float_val = $1;
						$$->place.args_type = 4;
						$$->my_type = Int;
					}
	;

identifier  : ID	{  	
						$$ = new attr();
						$$->place.var = $1;
						$$->place.args_type = 1;
						strcpy($$->var_name[0],$1);
							$$->dimension[0] = 0;
					 }/*Array can have infinite dimensions. Must do something about it in future.*/ 
		| ID array {
							$$ = (attr*)malloc(sizeof(attr));
							strcpy($$->var_name[0],$1);
							$$->dimension[0] = $2->dimension[0];
							free($2);
		}
	;
array  : '[' ID ']' array  {$$ = (attr*)malloc(sizeof(attr)); $$->dimension[0] = $4->dimension[0] +1; printf("%s",$2); free($4);}
	| '[' ID ']' {$$ = (attr*)malloc(sizeof(attr)); $$->dimension[0] = 1;}
	| '[' T_DEC_INT ']' {$$ = (attr*)malloc(sizeof(attr));  $$->dimension[0] = 1;}
	| '[' T_DEC_INT ']' array {$$ = (attr*)malloc(sizeof(attr)); $$->dimension[0] = $4->dimension[0] + 1; free($4);}
	;
%%

