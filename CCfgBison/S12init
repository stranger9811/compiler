

S1  : expr ',' Marker_If  S1  {
					$$ = new attr(); 
					$$->my_type = $4->my_type; 
					$$->dimension[0] = $4->dimension[0];
					$$->isreturn = $4->isreturn;

					((compiler *)c)->backpatch($1->truelist,$3);
					((compiler *)c)->backpatch($1->falselist,$3);
					$$->truelist = $4->truelist;
					$$->falselist = $4->falselist;

					free($1);
					free($4);
				}	/*statements separated by comma or a declaration/initialization*/
	
	|expr  {
				$$ = new attr(); 
				$$->my_type = Bool;
				$$->dimension[0]= $1->dimension[0]; 
				$$->truelist = $1->truelist; 
				$$->falselist = $1->falselist; 
				free($1);
			}
	|type init {
			#ifdef debug
						 cout << "S1 -> type init\n";
			#endif
			$$ = new attr();
			struct llm temp;

			temp.my_type= $1->my_type; 
			for(int i=0;i<$2->index;i++) {
				/* checking if variable is already declared */

						if(current_symbol_table->table.find(string( $2->var_name[i])) != current_symbol_table->table.end())
							yyerror("error: redeclaration \n");
					
				/*   ------------------------------------ */
						else {
							temp.dimension = $2->dimension[i];
							int j = check_keyword(string($2->var_name[i])); // 1 if error
							if(j==1)
								yyerror("error: variable name cannot be a keyword \n");
							else if(j==0)
								current_symbol_table->table[string($2->var_name[i])]=(temp);
						}

			}
#ifdef debug
			printf("Variables declared \n"); 
				for(int i=0;i<$2->index;i++) {
					printf("%s %d\n",$2->var_name[i],$2->dimension[i]);
				}
			#endif
				$$->my_type = Useless;
				free($1);
				free($2);
	}
	| T_RETURN expr 	{
								$$ = new attr();
								$$->isreturn = 1;
								$$->my_type = $2->my_type;
								$$->dimension[0] = $2->dimension[0];
								free($2);
								}
	| T_RETURN 				{
								$$->isreturn = 1;
								$$ = new attr();
								$$->my_type = Void;
								$$->dimension[0] = 0;
						
								}
	;

init : assign_stmt',' init 	/*Denotes declaration/initialization. If initializing, use assign_stmt*/
						 {
						 		#ifdef debug
						 				cout << "init -> assign_stmt ',' init\n";
						 		#endif
						 		$$ = new attr();
								strcpy($$->var_name[0],$1->var_name[0]);
								$$->dimension[0] = $1->dimension[0];
								$$->index = 1;
								for(int i=0; i<$3->index; i++) {
									$$->dimension[$$->index] = $3->dimension[i];
									strcpy($$->var_name[$$->index],$3->var_name[i]);
									$$->index++;
								}
								free($1);
								free($3);
						} /* Initialization is not done properly. declaration check is done in the assignment statment. Such declarations will always fail since the variable is not yet entered in the symbol table. */
	| identifier ',' init {
								$$ = new attr();
								strcpy($$->var_name[0],$1->var_name[0]);
								$$->dimension[0] = $1->dimension[0];
								$$->index = 1;
								for(int i=0; i<$3->index; i++) {
									$$->dimension[$$->index] = $3->dimension[i];
									strcpy($$->var_name[$$->index],$3->var_name[i]);
									$$->index++;
								}
								free($1);
								free($3);
							} 
	| assign_stmt {
						#ifdef debug
						 				cout << "init -> assign_stmt\n";
						 		#endif
						$$ = new attr();
						strcpy($$->var_name[0],$1->var_name[0]);
						$$->dimension[0] = $1->dimension[0];
						$$->index = 1;
						free($1);
					}
	| identifier  {
					$$ = new attr();
					strcpy($$->var_name[0],$1->var_name[0]);
					$$->dimension[0] = $1->dimension[0];
					$$->index = 1;
					free($1);
				  }
	;
