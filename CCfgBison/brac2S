
brac_open : '{' { 
					$$ = new attr();

					#ifdef debug2
						printf("creating new symbol table\n");
					#endif
				  struct symbol_table *temp = new  symbol_table;
				  current_symbol_table->children.push_back(temp); 
				  temp->scope_number = global_scope;
				  global_scope = global_scope + 1;
				  temp->parent = current_symbol_table;

				  current_symbol_table = temp;
				 
		 }
		 ;

brac_close : '}' {
				$$ = new attr();

				#ifdef debug
					printf("destroying symbol table\n");
				#endif
				  struct symbol_table *temp = current_symbol_table;
				  current_symbol_table = temp->parent;
				  delete temp;
		 }
		 ;
block  : brac_open M brac_close  {	
									#ifdef debug
						 				cout << "block -> brac_open M brac_close \n";
						 			#endif
									$$ = new attr(); 
									$$->my_type = $2->my_type;
									$$->dimension[0] = $2->dimension[0];
									$$->isreturn = $2->isreturn;
									$$->nextlist = $2->nextlist;

									free($2);
									}
									/*block can either be many statements enclosed in braces or just one S.*/
	| S  						{$$ = new attr(); free($1);
}		/*S can again be multiple statments separated by comma.*/
	;

M  : M  Marker_If   S 
			{
				$$ = new attr();
				#ifdef debug
					cout << "M -> S M\n";
				#endif

				if ($1->isreturn)
					$$->my_type = $1->my_type;
				else if ($3->isreturn)
					$$->my_type = $3->my_type;
				else $$->my_type = Useless;
				$$->dimension[0] = $1->dimension[0];
				$$->isreturn = $1->isreturn || $3->isreturn;
				
				if ($$->my_type!=$3->my_type && $1->isreturn && $3->isreturn )
					yyerror("Different return types for same function\n");
#ifdef debug2
	printf("types are: %d %d\n",$$->my_type,$3->my_type);
#endif
				
				((compiler *)c)->backpatch($1->nextlist,$2);
				$$->nextlist = $3->nextlist;
				free($1);
				free($3);
			}	/*Expanding statements inside a block*/
	| S 	{
				#ifdef debug
						cout << "M -> S\n";
				#endif
				$$ = new attr();
				$$->my_type = $1->my_type;
				$$->dimension[0] = $1->dimension[0];	
				$$->isreturn = $1->isreturn;
				$$->nextlist = $1->nextlist;

				free($1);
				}
	;

S  : S1';'	{
				#ifdef debug
						cout << "S -> S1\n";
				#endif
				$$ = new attr();
				
				
				$$->my_type = $1->my_type;
				$$->isreturn = $1->isreturn;

				
				$$->dimension[0] = $1->dimension[0];

				$$->nextlist = $1->nextlist;

				free($1);
			}	/* comma terminated statement or a block statement like if, for, while */
	| block_stmt {
					#ifdef debug
							cout << "S -> block_stmt\n";
					#endif
					$$ = new attr();
					$$->my_type = $1->my_type;
					$$->isreturn = $1->isreturn;

					$$->nextlist = $1->nextlist;
					$$->dimension[0] = $1->dimension[0];
					free($1);
					}
	| ';' {
				$$ = new attr();
	}

	;

exprlist : exprlist ',' expr    {
				$$ = new funcparams();
				for (int i=0;i < $1->total;i++)
				{
					$$->my_args[i] = $1->my_args[i];
					$$ -> my_type[i]  =    $1-> my_type[i];
					$$->dimension[i] = $1->dimension[i];
				}
				int total = $$->total = $1->total+1;
				total--;
				$$->my_args[total] = $3->place;
				$$->my_type[total] = $3->my_type;
				$$->dimension[total] = $3->dimension[0];
				delete $1;
				delete $3;
	}

		| expr {
				$$ = new funcparams();
				int total = 0;
				$$->my_args[total] = $1->place;
				$$->my_type[total] = $1->my_type;
				$$->dimension[total] = $1->dimension[0];
				$$->total = 1;
				delete $1;
	}

		| epsilon   {
				$$ = new funcparams();
	}
