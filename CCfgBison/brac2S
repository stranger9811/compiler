
brac_open : '{' { 
					$$ = (attr*)malloc(sizeof(attr));

#ifdef debug
	printf("creating new symbol table\n");
#endif
				  struct symbol_table *temp = new  symbol_table;
				  current_symbol_table->children.push_back(temp); 
				  temp->parent = current_symbol_table;

				  current_symbol_table = temp;
				 
		 }

brac_close : '}' {
				$$ = (attr*)malloc(sizeof(attr));

#ifdef debug
	printf("destroying symbol table\n");
#endif
				  struct symbol_table *temp = current_symbol_table;
				  current_symbol_table = temp->parent;
				  delete temp;
		 }

block  : brac_open M brac_close  {$$ = (attr*)malloc(sizeof(attr)); free($2);
}	/*block can either be many statements enclosed in braces or just one S.*/
	| S  {$$ = (attr*)malloc(sizeof(attr)); free($1);
}		/*S can again be multiple statments separated by comma.*/
	;

M  : S M  	{$$ = (attr*)malloc(sizeof(attr));
				free($1);free($2);}	/*Expanding statements inside a block*/
	| S 	{$$ = (attr*)malloc(sizeof(attr));
				free($1);}
	;

S  : S1';'	{$$ = (attr*)malloc(sizeof(attr));
				free($1);}	/* comma terminated statement or a block statement like if, for, while */
	| block_stmt {$$ = (attr*)malloc(sizeof(attr));
					free($1);}
	;
