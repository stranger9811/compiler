%%
code  : decl code	{$$ = (attr*)malloc(sizeof(attr));
						free($1);
						free($2);}
	| decl {$$ = (attr*)malloc(sizeof(attr));

			free($1);}
	;
decl  : type identifier';' {$$ = (attr*)malloc(sizeof(attr));

							free($1);
							free($2);}
	| T_TYPEDEF type ID';'  {$$ = (attr*)malloc(sizeof(attr));

								free($2);}
	| type func block   {$$ = (attr*)malloc(sizeof(attr));

								free($1);
								free($2);
								free($3);}	/*This is for function definition only. No rule yet for function declation.*/
	| void func block {$$ = (attr*)malloc(sizeof(attr));

								free($1);
								free($2);
								free($3);}	/*void type, since allowed only for functions must be separated. Don't allow return stmts for such blocks. Must define another type of block to do this.*/
	| T_STRUCT ID block';'  {$$ = (attr*)malloc(sizeof(attr));
								free($3);
								}
	| T_HEADER					{$$ = (attr*)	malloc(sizeof(attr));}
	;
/*	| #define macro const*/
type  : type '*' %prec DEREF   {$$ = (attr*)malloc(sizeof(attr));

								free($1);
								}
	| basic  {$$ = (attr*)malloc(sizeof(attr)); $$->my_type=$1->my_type; free($1);}
	;
basic : T_LONG_LONG  			{$$ = (attr*)malloc(sizeof(attr));$$->my_type=Long_long;}
	| T_INT 			{$$ = (attr*)malloc(sizeof(attr));$$->my_type=Int;}
	| T_CHAR 			{$$ = (attr*)malloc(sizeof(attr));$$->my_type=Char;}
	| T_FLOAT 			{$$ = (attr*)malloc(sizeof(attr));$$->my_type=Float;}
	| T_DOUBLE 			{$$ = (attr*)malloc(sizeof(attr));$$->my_type=Double;}
	| T_BOOL			{$$ = (attr*)malloc(sizeof(attr));$$->my_type=Bool;}
	;
void  : void '*' %prec DEREF   {$$ = (attr*)malloc(sizeof(attr)); free($1);}
	| T_VOID  {$$ = (attr*)malloc(sizeof(attr));}
	;
func  : ID'('args')'   {$$ = (attr*)malloc(sizeof(attr)); free($3);}
	| ID'('')'   {$$ = (attr*)malloc(sizeof(attr));}
	| T_MAIN'('args')'   {$$ = (attr*)malloc(sizeof(attr)); free($3);}
	| T_MAIN'('')'  {$$ = (attr*)malloc(sizeof(attr));}
	;
args  : type identifier',' args    {$$ = (attr*)malloc(sizeof(attr));   free($1); free($2);}
	| type identifier  {$$ = (attr*)malloc(sizeof(attr));   free($1); free($2);}
	;