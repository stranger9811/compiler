
block_stmt : T_IF    '('   expr   ')'    brac_open     Marker_If    M    brac_close 	{
											#ifdef debug
												cout << "block_expr : T_IF '('expr')' '{'M'}'";
											#endif
											$$ = new attr();
											if ($3->my_type != Bool) yyerror("condition is not bool inside if statement");
											$$->my_type = $7->my_type;
											$$->dimension[0]= $7->dimension[0];

											((compiler *)c)->backpatch($3->truelist, $6);
											$$->nextlist = ((compiler *)c)->merge_list($3->falselist,$7->nextlist);
											
											delete $5;
											delete $8;
 											free($3); free($7);
}	/*without brace if statements not allowed!*/
	| T_IF     '('    expr    ')'     brac_open     Marker_If     M     brac_close  Marker_Else    T_ELSE     brac_open     Marker_If     M      brac_close
											{
												$$ = new attr();
												if ($3->my_type != Bool) yyerror("Condition is not bool inside if statement\n");										
												((compiler *)c)->backpatch($3->truelist, $6);
												((compiler *)c)->backpatch($3->falselist, $12);
												vector <int> temp;
												temp = ((compiler *)c)->merge_list($7->nextlist, $9->nextlist);
												$$->nextlist = ((compiler *)c)->merge_list(temp, $13->nextlist);
												
												delete $5;
												delete $8,delete $11,delete $14;
	 											free($3); free($7); free($13);
	 											free($9);
	 										}

	| T_FOR    '('   S1   ';'   Marker_If    S1    ';'    Marker_If    S1   Marker_For  ')'    brac_open   Marker_If    M    brac_close  
										{
											$$ = new attr();
											
											if($6->my_type != Bool) yyerror("Condition not bool in For statement\n");

											$$->my_type = $14->my_type;
											$$->dimension[0]= $14->dimension[0];										
											
											$$->nextlist = $6->falselist;
											((compiler *)c)->backpatch($14->nextlist, $8);
											global_code[$10].result.int_val = $5;
											((compiler *)c)->backpatch($6->truelist, $13);
											code_element temp;
											temp.data1 = Jump;
											temp.result.int_val = $8;
											global_code.push_back(temp);

											free($3);
											free($6);
											free($9);
											free($12);
											free($14);
											free($15);
										}

	| T_WHILE    Marker_If    '('   S1   ')'   brac_open    Marker_If     M     brac_close  {
									$$ = new attr();

									if($4->my_type != Bool) yyerror("Condition not bool in While statement\n");
									
									$$->my_type = $8->my_type;
									$$->dimension[0]= $8->dimension[0];

									((compiler *)c)->backpatch($8->nextlist, $2);
									((compiler *)c)->backpatch($4->truelist, $7);
									$$->nextlist = $4->falselist;
#ifdef debug
cout << "Marker if :" << $7 << endl;
#endif
									struct code_element temp;
									temp.data1 = Jump;
									temp.result.int_val = $2;

									global_code.push_back(temp);

									delete $6;
									delete $9; 
									free($4);
									free($8);
	}
	;

expr  : expr '+' expr 			{ 
						$$ = new attr();
						
						$$->place.temp = newTemp();
						$$->place.args_type = 2;
						struct code_element temp_code;
						temp_code.arg1 = $1->place;
						temp_code.arg2 = $3->place;
						temp_code.result = $$->place;
						temp_code.data2 = "+";
						temp_code.data1 = Assignment;

						$$->code.insert ($$->code.end(),$1->code.begin(),$1->code.end());
						$$->code.insert ($$->code.end(),$3->code.begin(),$3->code.end());
						$$->code.push_back(temp_code);
						global_code.push_back(temp_code);



						#ifdef debug
							printf("in expr-> expr+expr\n");

						#endif

						if($1->my_type==Char || $1->my_type==Bool)
							yyerror("error: PLUS does not support bool and char\n");
						else if($3->my_type==Char || $3->my_type==Bool)
							yyerror("error: PLUS does not support bool and char\n");
						else {
							if($1->my_type==Double || $3->my_type==Double )
								$$->my_type=Double;
							else if($1->my_type==Float || $3->my_type==Float)
								$$->my_type=Float;
							else if($1->my_type==Long_long || $3->my_type==Long_long)
								$$->my_type=Long_long;
							else 
								$$->my_type=$1->my_type;
						}
						free($1);
						free($3);
					}
	| func			{$$ = (attr*)malloc(sizeof(attr)); free($1);
}
	| expr T_EQUAL_TEST expr	{
						
						$$ = new attr;
						$$->truelist = ((compiler *)c)->makelist(global_code.size());
						$$->falselist = ((compiler *)c)->makelist(global_code.size()+1);
						struct code_element temp;
						temp.data1 = Jump;
						temp.data2 = "==";
						temp.arg1 = $1->place;
						temp.arg2 = $3->place;

						global_code.push_back(temp);

						struct code_element temp2;
						temp2.data1 = Jump;

						global_code.push_back(temp2);

						$$->my_type=Bool;
						free($1);
						free($3);
					}
	| expr '<' expr			{
						$$ = new attr;
						$$->truelist = ((compiler *)c)->makelist(global_code.size());
						$$->falselist = ((compiler *)c)->makelist(global_code.size()+1);
						struct code_element temp;
						temp.data1 = Jump;
						temp.data2 = "<";
						temp.arg1 = $1->place;
						temp.arg2 = $3->place;

						global_code.push_back(temp);

						struct code_element temp2;
						temp2.data1 = Jump;

						global_code.push_back(temp2);

						$$->my_type=Bool;
						free($1);
						free($3);
					}
	| expr '>' expr			{
						$$ = new attr;
						$$->truelist = ((compiler *)c)->makelist(global_code.size());
						$$->falselist = ((compiler *)c)->makelist(global_code.size()+1);
						struct code_element temp;
						temp.data1 = Jump;
						temp.data2 = ">";
						temp.arg1 = $1->place;
						temp.arg2 = $3->place;

						global_code.push_back(temp);

						struct code_element temp2;
						temp2.data1 = Jump;

						global_code.push_back(temp2);

						$$->my_type=Bool;
						free($1);
						free($3);
					}
	| expr T_LESS_THAN_EQUAL expr	{
						$$ = new attr;
						$$->truelist = ((compiler *)c)->makelist(global_code.size());
						$$->falselist = ((compiler *)c)->makelist(global_code.size()+1);
						struct code_element temp;
						temp.data1 = Jump;
						temp.data2 = "<=";
						temp.arg1 = $1->place;
						temp.arg2 = $3->place;

						global_code.push_back(temp);

						struct code_element temp2;
						temp2.data1 = Jump;

						global_code.push_back(temp2);

						$$->my_type=Bool;
						free($1);
						free($3);
					}
	| expr T_GREATER_THAN_EQUAL expr{
						$$ = new attr;
						$$->truelist = ((compiler *)c)->makelist(global_code.size());
						$$->falselist = ((compiler *)c)->makelist(global_code.size()+1);
						struct code_element temp;
						temp.data1 = Jump;
						temp.data2 = ">=";
						temp.arg1 = $1->place;
						temp.arg2 = $3->place;

						global_code.push_back(temp);

						struct code_element temp2;
						temp2.data1 = Jump;

						global_code.push_back(temp2);

						$$->my_type=Bool;
						free($1);
						free($3);
					}
	| expr T_NOT_EQUAL expr		{
						$$ = new attr;
						$$->truelist = ((compiler *)c)->makelist(global_code.size());
						$$->falselist = ((compiler *)c)->makelist(global_code.size()+1);
						struct code_element temp;
						temp.data1 = Jump;
						temp.data2 = "!=";
						temp.arg1 = $1->place;
						temp.arg2 = $3->place;

						global_code.push_back(temp);

						struct code_element temp2;
						temp2.data1 = Jump;

						global_code.push_back(temp2);

						$$->my_type=Bool;
						free($1);
						free($3);
					}
	| assign_stmt  {$$ = (attr*)malloc(sizeof(attr)); free($1);
}
    	| expr '-' expr 		{ 
    					$$ = new attr();
						
						$$->place.temp = newTemp();
						$$->place.args_type = 2;
						struct code_element temp_code;
						temp_code.arg1 = $1->place;
						temp_code.arg2 = $3->place;
						temp_code.result = $$->place;
						temp_code.data2 = "-";
						temp_code.data1 = Assignment;

						$$->code.insert ($$->code.end(),$1->code.begin(),$1->code.end());
						$$->code.insert ($$->code.end(),$3->code.begin(),$3->code.end());
						$$->code.push_back(temp_code);
						global_code.push_back(temp_code);



						#ifdef debug
							printf("in expr-> expr-expr\n");

						#endif

						if($1->my_type==Char || $1->my_type==Bool)
							yyerror("error: MINUS does not support bool and char\n");
						else if($3->my_type==Char || $3->my_type==Bool)
							yyerror("error: MINUS does not support bool and char\n");
						else {
							if($1->my_type==Double || $3->my_type==Double )
								$$->my_type=Double;
							else if($1->my_type==Float || $3->my_type==Float)
								$$->my_type=Float;
							else if($1->my_type==Long_long || $3->my_type==Long_long)
								$$->my_type=Long_long;
							else 
								$$->my_type=$1->my_type;
						}
						free($1);
						free($3);
					}
	
	| expr '*' expr 		{ 
						$$ = new attr();
						
						$$->place.temp = newTemp();
						$$->place.args_type = 2;
						struct code_element temp_code;
						temp_code.arg1 = $1->place;
						temp_code.arg2 = $3->place;
						temp_code.result = $$->place;
						temp_code.data2 = "*";
						temp_code.data1 = Assignment;

						$$->code.insert ($$->code.end(),$1->code.begin(),$1->code.end());
						$$->code.insert ($$->code.end(),$3->code.begin(),$3->code.end());
						$$->code.push_back(temp_code);
						global_code.push_back(temp_code);



						#ifdef debug
							printf("in expr-> expr*expr\n");

						#endif

						if($1->my_type==Char || $1->my_type==Bool)
							yyerror("error: MULTIPLY does not support bool and char\n");
						else if($3->my_type==Char || $3->my_type==Bool)
							yyerror("error: MULTIPLY does not support bool and char\n");
						else {
							if($1->my_type==Double || $3->my_type==Double )
								$$->my_type=Double;
							else if($1->my_type==Float || $3->my_type==Float)
								$$->my_type=Float;
							else if($1->my_type==Long_long || $3->my_type==Long_long)
								$$->my_type=Long_long;
							else 
								$$->my_type=$1->my_type;
						}
						free($1);
						free($3);
					}
    	| expr '/' expr 		{ 
    					$$ = new attr();
						
						$$->place.temp = newTemp();
						$$->place.args_type = 2;
						struct code_element temp_code;
						temp_code.arg1 = $1->place;
						temp_code.arg2 = $3->place;
						temp_code.result = $$->place;
						temp_code.data2 = "";
						temp_code.data1 = Assignment;

						$$->code.insert ($$->code.end(),$1->code.begin(),$1->code.end());
						$$->code.insert ($$->code.end(),$3->code.begin(),$3->code.end());
						$$->code.push_back(temp_code);
						global_code.push_back(temp_code);



						#ifdef debug
							printf("in expr-> expr/expr\n");

						#endif

						if($1->my_type==Char || $1->my_type==Bool)
							yyerror("error: DIVIDE does not support bool and char\n");
						else if($3->my_type==Char || $3->my_type==Bool)
							yyerror("error: DIVIDE does not support bool and char\n");
						else {
							if(($1->my_type==Double) || ($3->my_type==Double) )
								$$->my_type=Double;
							else if($1->my_type==Float || $3->my_type==Float)
								$$->my_type=Float;
							else if($1->my_type==Long_long || $3->my_type==Long_long)
								$$->my_type=Long_long;
							else 
								$$->my_type=$1->my_type;
						}
						free($1);
						free($3);
					}
	| expr '%' expr   		{ 
						$$ = new attr();
						
						$$->place.temp = newTemp();
						$$->place.args_type = 2;
						struct code_element temp_code;
						temp_code.arg1 = $1->place;
						temp_code.arg2 = $3->place;
						temp_code.result = $$->place;
						temp_code.data2 = "%";
						temp_code.data1 = Assignment;

						$$->code.insert ($$->code.end(),$1->code.begin(),$1->code.end());
						$$->code.insert ($$->code.end(),$3->code.begin(),$3->code.end());
						$$->code.push_back(temp_code);
						global_code.push_back(temp_code);



						#ifdef debug
							printf("in expr-> expr\%expr\n");
						#endif

						if(!($1->my_type==Int || $1->my_type==Long_long || $1->my_type==Bool))        /* Added Bool*/
							yyerror("error: MOD supports only bool,int,long long");
						else if(!($3->my_type==Int || $3->my_type==Long_long || $3->my_type==Bool))
							yyerror("error: MOD supports only bool,int,long long");
						else
							$$->my_type=$3->my_type;
						free($1);
						free($3);
					}
	| expr T_AND Marker_If expr 		{
						$$ = new attr();
						((compiler *)c)->backpatch($1->truelist,$3);
						$$->truelist = $4->truelist;
						$$->falselist = ((compiler *)c)->merge_list($1->falselist,$4->falselist);


						if(!($1->my_type==Bool || $1->my_type==Int || $1->my_type==Long_long))
							yyerror("error: AND supports only bool,int,long long");
						else if(!($4->my_type==Bool || $4->my_type==Int || $4->my_type==Long_long))
							yyerror("error: AND supports only bool,int,long long");
						else 
							$$->my_type=Bool;
						free($1);
						free($4);
					}
	| expr T_OR Marker_If expr 		{	
						$$ = new attr();
 
						if(!($1->my_type==Bool || $1->my_type==Int || $1->my_type==Long_long))
							yyerror("error: OR supports only bool,int,long long. left operand is \n");
						else if(!($4->my_type==Bool || $4->my_type==Int || $4->my_type==Long_long))
							yyerror("error: OR supports only bool,int,long long. right operand is \n");
						else 
							$$->my_type=Bool;

						((compiler *)c)->backpatch($1->falselist,$3);
						$$->truelist = ((compiler *)c)->merge_list($1->truelist,$4->truelist);
						$$->falselist = $4->falselist;
						free($1);
						free($4);
					}
	| '!' expr    {$$ = (attr*)malloc(sizeof(attr));
					$$->my_type = Bool;

					$$->truelist = $2->falselist;
					$$->falselist = $2->truelist;

					 free($2);
					 }
	| '('expr')'  {$$ = (attr*)malloc(sizeof(attr));
$$->my_type = $2->my_type; free($2);}
	| identifier  {
			$$ = new attr();
			$$->place.var = $1->place.var; 
			$$->place.args_type = 1;
			struct symbol_table *temp = current_symbol_table;
			int flag = 1;
			while(flag) {
			           	if( temp->table.find(string( $1->var_name[0])) != temp->table.end()){
						$$->my_type = temp->table[string($1->var_name[0])].my_type;
#ifdef debug
printf("expr-->identifier:\nidentifier is of type %d\n",$$->my_type);
#endif
							flag = 0;
						$$->dimension[0] = temp->table[string($1->var_name[0])].dimension - $1->dimension[0];
				}
				if(temp->parent==NULL && flag==1) {
					yyerror("error: variable not declared\n");
					flag = 0;
				}
				temp = temp->parent;
			}
			free($1);
		  }
	| '+' expr %prec UPLUS {$$ = (attr*)malloc(sizeof(attr));
$$->my_type=$2->my_type; free($2);}
	| '-' expr %prec UMINUS {$$ = (attr*)malloc(sizeof(attr));
$$->my_type=$2->my_type; free($2);}
	|number {
				$$ = new attr();
				$$->place = $1->place;


				$$->place.args_type = $$->place.args_type;
				$$->my_type = $1->my_type;
				$$->dimension[0] = 0;
			}
	| '*' expr %prec DEREF {
								$$ = (attr*)malloc(sizeof(attr));
								$$->my_type=$2->my_type; 
								$$->dimension[0] = $2->dimension[0]+1;
								free($2);
								}
	| "true" 	{
				$$ = new attr();
				$$->truelist = ((compiler *)c)->makelist(global_code.size());

				struct code_element temp_code;
				temp_code.data1 = Jump;
				global_code.push_back(temp_code);
				$$->my_type = Bool;

			}

	| "false" {
				$$ = new attr();
				$$->falselist = ((compiler *)c)->makelist(global_code.size());

				struct code_element temp_code;
				temp_code.data1 = Jump;
				global_code.push_back(temp_code);
				$$->my_type = Bool;
	}
	;
	