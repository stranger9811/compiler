%{
#include <stdlib.h>
#include <stdio.h>
#include <string>
#include<string.h>
#include<vector>
#include <cstring>
#include<iostream>
#include <utility>
#include <algorithm>
#include <map>
//#include "functions.h"

#define KNRM  "\x1B[0m"
#define KRED  "\x1B[31m"
#define KGRN  "\x1B[32m"
#define KYEL  "\x1B[33m"
#define KBLU  "\x1B[34m"
#define KMAG  "\x1B[35m"
#define KCYN  "\x1B[36m"
#define KWHT  "\x1B[37m"


using namespace std;
int no_line;
int totalerrs;
bool maindef;
struct symbol_table *current_symbol_table;
int max_index=0;
vector <struct code_element> global_code;
map <string, int> stackaddr;
string reg[32];
extern void codegen();
extern void create_mips();



int yylex();
int yyparse();
int yywrap();

int newTemp() {
	max_index++;
	return max_index;		
}


int check_keyword(string identifier);
void yyerror(const char *s,string color=KRED,string e="")
{
	if(color==KRED)
   		totalerrs++;
    fprintf(stderr, "%sline %d: %s %s%s",color.c_str(),no_line, s,e.c_str(),KNRM);

}

void *c;
FILE *text;
map <int,int> label_info;
int is_declaration = 0;
int global_scope = 1;
int main_function_line = -1;


%}

%code requires
{
	#include "resources.h"
}

%union {
long long integer;
long double real;
char lexeme[10000];
struct lexemeNparam *lexemeNparamlist;
struct funcparams *paramlist;
struct attr *attributes;
//Yet to include exponential numbers and hexadecimals.
};


%token T_STRUCT
%token T_BREAK
%token T_CONTINUE
%token T_TYPEDEF
%token T_CHAR
%token T_DOUBLE
%token T_INT
%token T_FLOAT
%token T_LONG_LONG
%token T_FOR
%token T_IF
%token T_ELSE
%token T_WHILE
%token T_GOTO
%token T_RETURN
%token T_PRINT_INT
%token T_VOID
%token T_SCANF
%token T_SIZEOF
%token T_UNSIGNED
%token T_SIGNED
%token T_CONST
%token T_SHORT
%token T_EXTERN
%token T_LONG
%token T_BOOL
%token T_APOS


%token <real> T_DEC_FLOAT
%token <integer> T_DEC_INT
%token <lexeme> T_STRING
%token <lexeme> T_HEADER
%token <lexeme> ID

%token <lexeme> T_MAIN
%token <lexeme> T_IO_INT
%token <lexeme> T_IO_LONG_LONG
%token <lexeme> T_IO_STRING
%token <lexeme> T_IO_FLOAT

%right '{'
%right '('
%right '['
%left ','
%right  T_MULT_SELF T_DIVIDE_SELF
%right  T_PLUS_SELF T_MINUS_SELF
%right  '='
%left T_OR
%left T_AND
%left '|'
%left '^'
%left '&'
%left T_EQUAL_TEST T_NOT_EQUAL
%left '>' T_GREATER_THAN_EQUAL
%left '<' T_LESS_THAN_EQUAL
%left '+' '-'
%left '*' '/' '%'
/*%right '&'                   address of a variable*/
%right DEREF 	/* using unary * for dereferncing a pointer.*/
/*%right   (type)              typecasting*/
%right  '!'
%right  UPLUS UMINUS	/*unary + and -*/
%right  T_ADD_ONE T_SUB_ONE
%left T_THIS_POINTER
%left '.'
%left ']'
%left ')'
%right '}'

%type<attributes> basic
%type<attributes> type
%type<attributes> identifier
%type<attributes> array
%type<attributes> init
%type<attributes> assign_stmt
%type<attributes> code
%type<attributes> decl
%type<attributes> void
%type<lexemeNparamlist> func
%type<paramlist> args
%type<attributes> brac_open
%type<attributes> brac_close
%type<attributes> block
%type<attributes> M
%type<integer> Marker_For
%type<integer> Marker_If
%type<attributes> Marker_Else
%type<attributes> S
%type<attributes> S1
%type<attributes> block_stmt
%type<attributes> expr
%type<attributes> number
%type<paramlist> exprlist
%type<attributes> circl_brac_open

%start code1
