%{
#include <stdlib.h>
#include <stdio.h>
#include <string>
#include<vector>
#include <cstring>
#include<iostream>
#include <utility>
#include <algorithm>
#include <map>
#include "resources.h"

using namespace std;
int no_line;

using namespace type_enum;
std::string enumtostring(type_enum type)
{

	if(type==Bool) return "bool";
	if(type==Long_long) return "long long";
	if(type==Char) return "char";
	if(type==Int) return "int";
	if(Float==type) return "float";
	if(Double==type) return "double";
	if(Void==type) return "void";
	if(Pointer==type) return "Pointer";
}

void yyerror(const char *s, string e = "")
{

   fprintf(stderr, "line %d: %s %s",no_line , s,c.c_str());
 
}

char all_lexemes[20000];
int index_all_lexemes;
struct llm {
	type_enum my_type;
	int dimension;
};
struct symbol_table {
	vector <struct symbol_table *> children;
	struct symbol_table *parent;
	map <string, struct llm> table;
	symbol_table() {}
};

struct symbol_table *current_symbol_table;


int yylex();
int yyparse();
int yywrap();


%}


%union {
type_enum my_type;
long long integer;
long double real;
char lexeme[10000];
struct aaaa {
	int dimension;
	char var_name[100];
};
struct bbbb {
	char var_name[50][100];
	int dimension[50];
	int index;
};
struct bbbb init_struct;
struct aaaa tuple;

//Yet to include exponential numbers and hexadecimals.
};


%token T_STRUCT
%token T_BREAK
%token T_CONTINUE
%token T_TYPEDEF
%token T_CHAR
%token T_DOUBLE
%token T_INT
%token T_FLOAT
%token T_LONG_LONG
%token T_FOR
%token T_IF
%token T_ELSE
%token T_WHILE
%token T_GOTO
%token T_RETURN
%token T_PRINTF
%token T_VOID
%token T_SCANF
%token T_SIZEOF
%token T_UNSIGNED
%token T_SIGNED
%token T_CONST
%token T_SHORT
%token T_EXTERN
%token T_LONG
%token T_BOOL
%token T_APOS

%token <real> T_DEC_FLOAT
%token <integer> T_DEC_INT
%token <lexeme> T_STRING
%token <lexeme> T_HEADER
%token <lexeme> ID

%token <lexeme> T_MAIN
%token <lexeme> T_AND
%token <lexeme> T_GREATER_THAN_EQUAL
%token <lexeme> T_LESS_THAN_EQUAL
%token <lexeme> T_EQUAL_TEST
%token <lexeme> T_NOT_EQUAL
%token <lexeme> T_OR
%token <lexeme> T_PLUS_SELF
%token <lexeme> T_MINUS_SELF
%token <lexeme> T_MULT_SELF
%token <lexeme> T_DIVIDE_SELF
%token <lexeme> T_THIS_POINTER
%token <lexeme> T_ADD_ONE
%token <lexeme> T_SUB_ONE
%token <lexeme> T_IO_INT
%token <lexeme> T_IO_LONG_LONG
%token <lexeme> T_IO_STRING
%token <lexeme> T_IO_FLOAT

%right '{'
%right '('
%right '['
%left ','
%right  T_MULT_SELF T_DIVIDE_SELF
%right  T_PLUS_SELF T_MINUS_SELF
%right  '='
%left T_OR
%left T_AND
%left '|'
%left '^'
%left '&'
%left T_EQUAL_TEST T_NOT_EQUAL
%left '>' T_GREATER_THAN_EQUAL
%left '<' T_LESS_THAN_EQUAL
%left '+' '-'
%left '*' '/' '%'
/*%right '&'                   address of a variable*/
%right DEREF 	/* using unary * for dereferncing a pointer.*/
/*%right   (type)              typecasting*/
%right  '!'
%right  UPLUS UMINUS	/*unary + and -*/
%right  T_ADD_ONE T_SUB_ONE
%left T_THIS_POINTER
%left '.'
%left ']'
%left ')'
%right '}'

%type<type_enum> basic
%type<type_enum> type
%type<tuple> identifier
%type<integer> array
%type<init_struct> init
%type<tuple> assign_stmt
%type<my_type> expr


%start code

%%
code  : decl code	
	| decl
	;
decl  : type identifier';'
	| T_TYPEDEF type ID';'  
	| type func block  	/*This is for function definition only. No rule yet for function declation.*/
	| void func block	/*void type, since allowed only for functions must be separated. Don't allow return stmts for such blocks. Must define another type of block to do this.*/
	| T_STRUCT ID block';'  
	| T_HEADER
	;
/*	| #define macro const*/
type  : type '*' %prec DEREF
	| basic  {$$=$1;}
	;
basic : T_LONG_LONG  			{$$=Long_long;}
	| T_INT 			{$$=Int;}
	| T_CHAR 			{$$=Char;}
	| T_FLOAT 			{$$=Float;}
	| T_DOUBLE 			{$$=Double;}
	| T_BOOL			{$$=Bool;}
	;
void  : void '*' %prec DEREF
	| T_VOID
	;
func  : ID'('args')' 
	| ID'('')' 
	| T_MAIN'('args')' 
	| T_MAIN'('')'
	;
args  : type identifier',' args  
	| type identifier
	;
brac_open : '{' { 
#ifdef debug
	printf("creating new symbol table\n");
#endif
				  struct symbol_table *temp = new  symbol_table;
				  current_symbol_table->children.push_back(temp); 
				  temp->parent = current_symbol_table;

				  current_symbol_table = temp;
				 
		 }

brac_close : '}' {
#ifdef debug
	printf("destroying symbol table\n");
#endif
				  struct symbol_table *temp = current_symbol_table;
				  current_symbol_table = temp->parent;
				  delete temp;
		 }

block  : brac_open M brac_close 	/*block can either be many statements enclosed in braces or just one S.*/
	| S 		/*S can again be multiple statments separated by comma.*/
	;

M  : S M  		/*Expanding statements inside a block*/
	| S 
	;

S  : S1';'		/* comma terminated statement or a block statement like if, for, while */
	| block_stmt
	;
S1  : stmt','S1 	/*statements separated by comma or a declaration/initialization*/
	|stmt
	|type init {
			
			struct llm temp;

			temp.my_type= $1; 
			for(int i=0;i<$2.index;i++) {
				/* checking if variable is already declared */

						if(current_symbol_table->table.find(string( $2.var_name[i])) != current_symbol_table->table.end())
							yyerror("error: redeclaration \n");
					
				/*   ------------------------------------ */
					temp.dimension = $2.dimension[i];
					temp.start = &(all_lexemes[index_all_lexemes]);
					int len = strlen($2.var_name[i]);
					
					for(int j=0; j<len;j++)
					{
						all_lexemes[index_all_lexemes+j] = $2.var_name[i][j]; 
					}
					all_lexemes[index_all_lexemes+len] = '\0';
					index_all_lexemes += len+1;
					current_symbol_table->table[string($2.var_name[i])]=(temp);
				}
			#ifdef debug
				printf("Variables declared \n"); 
				for(int i=0;i<$2.index;i++) {
					printf("%s %d\n",$2.var_name[i],$2.dimension[i]);
				}
			#endif

	}
	;

init : assign_stmt',' init 	/*Denotes declaration/initialization. If initializing, use assign_stmt*/
						 {
								strcpy($$.var_name[0],$1.var_name);
								$$.dimension[0] = $1.dimension;
								$$.index = 1;
								for(int i=0; i<$3.index; i++) {
									$$.dimension[$$.index] = $3.dimension[i];
									strcpy($$.var_name[$$.index],$3.var_name[i]);
									$$.index++;
								}
						} 
	| identifier ',' init {
								strcpy($$.var_name[0],$1.var_name);
								$$.dimension[0] = $1.dimension;
								$$.index = 1;
								for(int i=0; i<$3.index; i++) {
									$$.dimension[$$.index] = $3.dimension[i];
									strcpy($$.var_name[$$.index],$3.var_name[i]);
									$$.index++;
								}
							} 
	| assign_stmt {
						strcpy($$.var_name[0],$1.var_name);
						$$.dimension[0] = $1.dimension;
						$$.index = 1;
					}
	| identifier  {
					strcpy($$.var_name[0],$1.var_name);
					$$.dimension[0] = $1.dimension;
					$$.index = 1;
				  }
	;

block_stmt : T_IF '('stmt')' '{'M'}' 		/*without brace if statements not allowed!*/
	| T_IF '('stmt')' '{' T_ELSE '}'
	| T_FOR '('S1';'S1';'S1')' block  
	| T_WHILE '('S1')' block  
	;
stmt: expr			/*Useless non-terminal. Too lazy to update.*/
	;
expr  : expr '+' expr/* { 
						if(strcmp($1,"char")==0 || strcmp($1,"bool")==0)
							yyerror("error: PLUS does not support bool and char\n");
						else if(strcmp($3,"char")==0 || strcmp($3,"bool")==0)
							yyerror("error: PLUS does not support bool and char\n");
						else {
							if((strcmp($1,"double")==0) || (strcmp($3,"double")==0) )
								strcpy($$,"double");
							else if((strcmp($1,"float")==0) || (strcmp($3,"float")==0))
								strcpy($$,"float");
							else if((strcmp($1,"long long")==0) || (strcmp($3,"long long")==0))
								strcpy($$,"long long");
							else 
								strcpy($$,$1);
						}
					}
	| func
	| expr T_EQUAL_TEST expr
	| expr '<' expr
	| expr '>' expr
	| expr T_LESS_THAN_EQUAL expr
	| expr T_GREATER_THAN_EQUAL expr
	| expr T_NOT_EQUAL expr
	| assign_stmt
    	| expr '-' expr { 
						if(strcmp($1,"char")==0 || strcmp($1,"bool")==0)
							yyerror("error: MINUS does not support bool and char\n");
						else if(strcmp($3,"char")==0 || strcmp($3,"bool")==0)
							yyerror("error: MINUS does not support bool and char\n");
						else {
							if((strcmp($1,"double")==0) || (strcmp($3,"double")==0) )
								strcpy($$,"double");
							else if((strcmp($1,"float")==0) || (strcmp($3,"float")==0))
								strcpy($$,"float");
							else if((strcmp($1,"long long")==0) || (strcmp($3,"long long")==0))
								strcpy($$,"long long");
							else 
								strcpy($$,$1);
						}
					}
	| expr '*' expr { 
						if(strcmp($1,"char")==0 || strcmp($1,"bool")==0)
							yyerror("error: MULTIPLY does not support bool and char\n");
						else if(strcmp($3,"char")==0 || strcmp($3,"bool")==0)
							yyerror("error: MULTIPLY does not support bool and char\n");
						else {
							if((strcmp($1,"double")==0) || (strcmp($3,"double")==0) )
								strcpy($$,"double");
							else if((strcmp($1,"float")==0) || (strcmp($3,"float")==0))
								strcpy($$,"float");
							else if((strcmp($1,"long long")==0) || (strcmp($3,"long long")==0))
								strcpy($$,"long long");
							else 
		2						strcpy($$,$1);
						}
					}
    	| expr '/' expr { 
						if(strcmp($1,"char")==0 || strcmp($1,"bool")==0)
							yyerror("error: DIVIDE does not support bool and char\n");
						else if(strcmp($3,"char")==0 || strcmp($3,"bool")==0)
							yyerror("error: DIVIDE does not support bool and char\n");
						else {
							if((strcmp($1,"double")==0) || (strcmp($3,"double")==0) )
								strcpy($$,"double");
							else if((strcmp($1,"float")==0) || (strcmp($3,"float")==0))
								strcpy($$,"float");
							else if((strcmp($1,"long long")==0) || (strcmp($3,"long long")==0))
								strcpy($$,"long long");
							else 
								strcpy($$,$1);
						}

					}
	| expr '%' expr   { 
						if(!(strcmp($1,"int")==0 || strcmp($1,"long long")==0))
							yyerror("error: MOD supports only bool,int,long long");
						else if(!(strcmp($3,"int")==0 || strcmp($3,"long long")==0))
							yyerror("error: MOD supports only bool,int,long long");
						else
							strcpy($$,$3);
					  }
	| expr T_AND expr { 
						if(!(strcmp($1,"bool")==0 || strcmp($1,"int")==0 || strcmp($1,"long long")==0))
							yyerror("error: AND supports only bool,int,long long");
						else if(!(strcmp($3,"bool")==0 || strcmp($3,"int")==0 || strcmp($3,"long long")==0))
							yyerror("error: AND supports only bool,int,long long");
						else 
							strcpy($$,"bool");
					}*/
	| expr T_OR expr { 
						if(!($1==Bool || $1==Int || $1==Long_long))
							yyerror("error: OR supports only bool,int,long long. left operand is ",enumtostring($1));
						if(!($3==Bool || $3==Int || $3==Long_long))
							yyerror("error: OR supports only bool,int,long long. right operand is ",enumtostring($3));
						else 
							$$=Bool;
					}
	| '!' expr    {$$ = Bool;}
	| '('expr')'  {$$ = $2;}
	| ID  {
			struct symbol_table *temp = current_symbol_table;
			int flag = 1;
			while(flag) {
			           	if( temp->table.find(string( $1)) != temp->table.end()){
						$$ = temp->table[string($1)].my_type;
						flag = 0;
					
				}
				if(temp->parent==NULL&&flag==1) {
					yyerror("error: variable not declared\n");
					flag = 0;
				}
				temp = temp->parent;
			}
		  }
	| '+' expr %prec UPLUS {$$=$2;}
	| '-' expr %prec UMINUS {$$=$2;}
	|number 
	;
assign_stmt : ID '=' expr {
							$$.dimension = 0;
							strcpy($$.var_name,$1);

				}/*Assignment statement.*/
	;

number : T_DEC_INT	
	| T_DEC_FLOAT
	;

identifier  : ID	{  		strcpy($$.var_name,$1);
							$$.dimension = 0;
					 }/*Array can have infinite dimensions. Must do something about it in future.*/ 
		| ID array {
							strcpy($$.var_name,$1);
							$$.dimension = $2;
		}
	;
array  : '[' ID ']' array  {$$ = $4 +1; printf("%s",$2);}
	| '[' ID ']' {$$ = 1;}
	| '[' T_DEC_INT ']' { $$ = 1;}
	| '[' T_DEC_INT ']' array {$$ = $4 + 1;}
	;
%%

int main()
{
		no_line = 1;
		current_symbol_table = new symbol_table;
		current_symbol_table->parent = NULL;
        yyparse();
		return 0;
}
