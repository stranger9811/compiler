
block_stmt : T_IF '('stmt')' brac_open Marker_e  M brac_close {
													#ifdef debug
														cout << "In block_stmt : T_IF '('stmt')' '{' Marker_e  M'}'\n";
													#endif
													$$ = (attr*)malloc(sizeof(attr));
													$$->my_type = $7->my_type;
													$$->dimension[0]= $7->dimension[0];
 													free($3); free($7);
												}	/*without brace if statements not allowed!*/
	| T_IF '('stmt')' '{' M '}' T_ELSE '{' M '}' {$$ = (attr*)malloc(sizeof(attr));
											
	 											free($3); free($6); free($10);}

	| T_FOR '('S1';'S1';'S1')' '{' M '}'  {$$ = (attr*)malloc(sizeof(attr));
											
											$$->my_type = $10->my_type;
											$$->dimension[0]= $10->dimension[0];										
											free($3);
											free($5);
											free($7);
											free($10);
	}

	| T_WHILE '('S1')' '{' M '}'  {
									$$ = (attr*)malloc(sizeof(attr));	
									$$->my_type = $6->my_type;
									$$->dimension[0]= $6->dimension[0];
									free($3);
									free($6);
	}
	;
stmt: expr		{$$ = (attr*)malloc(sizeof(attr));free($1);}
	/*Useless non-terminal. Too lazy to update.*/
	;
expr  : expr '+' expr 			{ 
						$$ = new attr();
						
						$$->place.temp = newTemp();
						$$->place.args_type = 2;
						struct code_element temp_code;
						temp_code.arg1 = $1->place;
						temp_code.arg2 = $3->place;
						temp_code.result = $$->place;
						temp_code.data2 = "+";
						temp_code.data1 = Assignment;

						$$->code.insert ($$->code.end(),$1->code.begin(),$1->code.end());
						$$->code.insert ($$->code.end(),$3->code.begin(),$3->code.end());
						$$->code.push_back(temp_code);
						global_code.push_back(temp_code);



						#ifdef debug
							printf("in expr-> expr+expr\n");

						#endif

						if($1->my_type==Char || $1->my_type==Bool)
							yyerror("error: PLUS does not support bool and char\n");
						else if($3->my_type==Char || $3->my_type==Bool)
							yyerror("error: PLUS does not support bool and char\n");
						else {
							if($1->my_type==Double || $3->my_type==Double )
								$$->my_type=Double;
							else if($1->my_type==Float || $3->my_type==Float)
								$$->my_type=Float;
							else if($1->my_type==Long_long || $3->my_type==Long_long)
								$$->my_type=Long_long;
							else 
								$$->my_type=$1->my_type;
						}
						free($1);
						free($3);
					}
	| func			{$$ = (attr*)malloc(sizeof(attr)); free($1);
					}
	
	
	| expr Rel expr			{
						$$ = new attr;
						$$->truelist = makelist(global_code.size());
						$$->falselist = makelist(global_code.size()+1);
						struct code_element temp;
						temp.data1 = Jump;
						temp.data2 = $2->place.var;
						temp.arg1 = $1->place;
						temp.arg2 = $3->place;

						global_code.push_back(temp);

						struct code_element temp2;
						temp2.data1 = Jump;

						global_code.push_back(temp2);


						
						$$->my_type=Bool;
						free($1);
						free($3);
					}
	
	| assign_stmt  {
					#ifdef debug
						cout << "expr -> assign_stmt\n";
					#endif
					$$ = (attr*)malloc(sizeof(attr)); free($1);
		}
    	| expr '-' expr 		{ 
    					$$ = new attr();
						
						$$->place.temp = newTemp();
						$$->place.args_type = 2;
						struct code_element temp_code;
						temp_code.arg1 = $1->place;
						temp_code.arg2 = $3->place;
						temp_code.result = $$->place;
						temp_code.data2 = "-";
						temp_code.data1 = Assignment;

						$$->code.insert ($$->code.end(),$1->code.begin(),$1->code.end());
						$$->code.insert ($$->code.end(),$3->code.begin(),$3->code.end());
						$$->code.push_back(temp_code);
						global_code.push_back(temp_code);



						#ifdef debug
							printf("in expr-> expr-expr\n");

						#endif

						if($1->my_type==Char || $1->my_type==Bool)
							yyerror("error: MINUS does not support bool and char\n");
						else if($3->my_type==Char || $3->my_type==Bool)
							yyerror("error: MINUS does not support bool and char\n");
						else {
							if($1->my_type==Double || $3->my_type==Double )
								$$->my_type=Double;
							else if($1->my_type==Float || $3->my_type==Float)
								$$->my_type=Float;
							else if($1->my_type==Long_long || $3->my_type==Long_long)
								$$->my_type=Long_long;
							else 
								$$->my_type=$1->my_type;
						}
						free($1);
						free($3);
					}
	
	| expr '*' expr 		{ 
						$$ = new attr();
						
						$$->place.temp = newTemp();
						$$->place.args_type = 2;
						struct code_element temp_code;
						temp_code.arg1 = $1->place;
						temp_code.arg2 = $3->place;
						temp_code.result = $$->place;
						temp_code.data2 = "*";
						temp_code.data1 = Assignment;

						$$->code.insert ($$->code.end(),$1->code.begin(),$1->code.end());
						$$->code.insert ($$->code.end(),$3->code.begin(),$3->code.end());
						$$->code.push_back(temp_code);
						global_code.push_back(temp_code);



						#ifdef debug
							printf("in expr-> expr*expr\n");

						#endif

						if($1->my_type==Char || $1->my_type==Bool)
							yyerror("error: MULTIPLY does not support bool and char\n");
						else if($3->my_type==Char || $3->my_type==Bool)
							yyerror("error: MULTIPLY does not support bool and char\n");
						else {
							if($1->my_type==Double || $3->my_type==Double )
								$$->my_type=Double;
							else if($1->my_type==Float || $3->my_type==Float)
								$$->my_type=Float;
							else if($1->my_type==Long_long || $3->my_type==Long_long)
								$$->my_type=Long_long;
							else 
								$$->my_type=$1->my_type;
						}
						free($1);
						free($3);
					}
    	| expr '/' expr 		{ 
    					$$ = new attr();
						
						$$->place.temp = newTemp();
						$$->place.args_type = 2;
						struct code_element temp_code;
						temp_code.arg1 = $1->place;
						temp_code.arg2 = $3->place;
						temp_code.result = $$->place;
						temp_code.data2 = "";
						temp_code.data1 = Assignment;

						$$->code.insert ($$->code.end(),$1->code.begin(),$1->code.end());
						$$->code.insert ($$->code.end(),$3->code.begin(),$3->code.end());
						$$->code.push_back(temp_code);
						global_code.push_back(temp_code);



						#ifdef debug
							printf("in expr-> expr/expr\n");

						#endif

						if($1->my_type==Char || $1->my_type==Bool)
							yyerror("error: DIVIDE does not support bool and char\n");
						else if($3->my_type==Char || $3->my_type==Bool)
							yyerror("error: DIVIDE does not support bool and char\n");
						else {
							if(($1->my_type==Double) || ($3->my_type==Double) )
								$$->my_type=Double;
							else if($1->my_type==Float || $3->my_type==Float)
								$$->my_type=Float;
							else if($1->my_type==Long_long || $3->my_type==Long_long)
								$$->my_type=Long_long;
							else 
								$$->my_type=$1->my_type;
						}
						free($1);
						free($3);
					}
	| expr '%' expr   		{ 
						$$ = new attr();
						
						$$->place.temp = newTemp();
						$$->place.args_type = 2;
						struct code_element temp_code;
						temp_code.arg1 = $1->place;
						temp_code.arg2 = $3->place;
						temp_code.result = $$->place;
						temp_code.data2 = "%";
						temp_code.data1 = Assignment;

						$$->code.insert ($$->code.end(),$1->code.begin(),$1->code.end());
						$$->code.insert ($$->code.end(),$3->code.begin(),$3->code.end());
						$$->code.push_back(temp_code);
						global_code.push_back(temp_code);



						#ifdef debug
							printf("in expr-> expr\%expr\n");
						#endif

						if(!($1->my_type==Int || $1->my_type==Long_long || $1->my_type==Bool))        /* Added Bool*/
							yyerror("error: MOD supports only bool,int,long long");
						else if(!($3->my_type==Int || $3->my_type==Long_long || $3->my_type==Bool))
							yyerror("error: MOD supports only bool,int,long long");
						else
							$$->my_type=$3->my_type;
						free($1);
						free($3);
					}
	| expr T_AND Marker_e expr 		{
						$$ = new attr();
						backpatch($1->falselist,$3);
						//$$->truelist = merge_list($1->truelist.begin(),$1->truelist.end(),$4->truelist.begin(),$4->truelist.end());
						for(int x=0; x<$4->falselist.size();x++) {
								$$->falselist.push_back($4->falselist[x]);
						}

						if(!($1->my_type==Bool || $1->my_type==Int || $1->my_type==Long_long))
							yyerror("error: AND supports only bool,int,long long");
						else if(!($4->my_type==Bool || $4->my_type==Int || $4->my_type==Long_long))
							yyerror("error: AND supports only bool,int,long long");
						else 
							$$->my_type=Bool;
						free($1);
						free($4);
					}
	| expr T_OR Marker_e expr 		{	
						$$ = (attr*)malloc(sizeof(attr));
 
						if(!($1->my_type==Bool || $1->my_type==Int || $1->my_type==Long_long))
							yyerror("error: OR supports only bool,int,long long. left operand is \n");
						else if(!($4->my_type==Bool || $4->my_type==Int || $4->my_type==Long_long))
							yyerror("error: OR supports only bool,int,long long. right operand is \n");
						else 
							$$->my_type=Bool;
						free($1);
						free($4);
					}
	| '!' expr    {$$ = (attr*)malloc(sizeof(attr));
$$->my_type = Bool; free($2);}
	| '('expr')'  {$$ = (attr*)malloc(sizeof(attr));
$$->my_type = $2->my_type; free($2);}
	| identifier  {
			$$ = new attr();
			$$->place.var = $1->place.var; 
			$$->place.args_type = 1;
			struct symbol_table *temp = current_symbol_table;
			int flag = 1;
			while(flag) {
			           	if( temp->table.find(string( $1->var_name[0])) != temp->table.end()){
						$$->my_type = temp->table[string($1->var_name[0])].my_type;
#ifdef debug
printf("expr-->identifier:\nidentifier is of type %d\n",$$->my_type);
#endif
							flag = 0;
						$$->dimension[0] = temp->table[string($1->var_name[0])].dimension - $1->dimension[0];
				}
				if(temp->parent==NULL && flag==1) {
					yyerror("error: variable not declared\n");
					flag = 0;
				}
				temp = temp->parent;
			}
			free($1);
		  }
	| '+' expr %prec UPLUS {$$ = (attr*)malloc(sizeof(attr));
$$->my_type=$2->my_type; free($2);}
	| '-' expr %prec UMINUS {$$ = (attr*)malloc(sizeof(attr));
$$->my_type=$2->my_type; free($2);}
	|number {
				$$ = new attr();
				$$->place = $1->place;

				struct code_element temp_code;
				temp_code.data1 = Jump;
				global_code.push_back(temp_code);
				if($1->place.int_val==0) {
					$1->falselist = makelist(global_code.size());
				}
				else {
					$1->truelist = makelist(global_code.size());
				}

				$$->place.args_type = $$->place.args_type;
				$$->my_type = $1->my_type;
			}
	| '*' expr %prec DEREF {
								$$ = (attr*)malloc(sizeof(attr));
								$$->my_type=$2->my_type; 
								$$->dimension[0] = $2->dimension[0]+1;
								free($2);
								}
	;
Rel : '<'     { $$ = new attr(); $$->place.var = "<";}

	| '>'    { $$ = new attr(); $$->place.var = ">";}

	| T_GREATER_THAN_EQUAL { $$ = new attr(); $$->place.var = ">=";}

	| T_EQUAL_TEST { $$ = new attr(); $$->place.var = "==";}

	| T_LESS_THAN_EQUAL { $$ = new attr(); $$->place.var = "<=";}

	| T_NOT_EQUAL  { $$ = new attr(); $$->place.var = "!=";}
	;

